name: DevOps Assignment CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.5.0
  TERRAGRUNT_VERSION: 0.50.0

jobs:
  # Job 1: Infrastructure Deployment
  infrastructure:
    name: 🏗️ Deploy Infrastructure
    runs-on: ubuntu-latest
    
    # Set outputs for the next job
    outputs:
      s3-bucket-name: ${{ steps.terraform-output.outputs.s3_bucket_id }}
      cloudfront-url: ${{ steps.terraform-output.outputs.cloudfront_url }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔧 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: 🛠️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false
    
    - name: 📦 Install Terragrunt
      run: |
        wget https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
        terragrunt --version
    
    - name: 🗄️ Setup Terraform Backend
      run: |
        # Get AWS account ID for unique bucket naming
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        STATE_BUCKET="terraform-state-devops-assignment-${AWS_ACCOUNT_ID}"
        LOCK_TABLE="terraform-lock-devops-assignment"
        
        echo "Setting up Terraform backend..."
        echo "State bucket: ${STATE_BUCKET}"
        echo "Lock table: ${LOCK_TABLE}"
        
        # Create S3 bucket for state if it doesn't exist
        if ! aws s3api head-bucket --bucket "${STATE_BUCKET}" 2>/dev/null; then
          echo "Creating S3 bucket for Terraform state..."
          aws s3api create-bucket --bucket "${STATE_BUCKET}" --region ${{ env.AWS_REGION }}
          aws s3api put-bucket-versioning --bucket "${STATE_BUCKET}" --versioning-configuration Status=Enabled
          aws s3api put-bucket-encryption --bucket "${STATE_BUCKET}" --server-side-encryption-configuration '{
            "Rules": [
              {
                "ApplyServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }
            ]
          }'
          aws s3api put-public-access-block --bucket "${STATE_BUCKET}" --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
        else
          echo "S3 bucket ${STATE_BUCKET} already exists"
        fi
        
        # Create DynamoDB table for locking if it doesn't exist
        if ! aws dynamodb describe-table --table-name "${LOCK_TABLE}" 2>/dev/null; then
          echo "Creating DynamoDB table for state locking..."
          aws dynamodb create-table \
            --table-name "${LOCK_TABLE}" \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \
            --tags Key=Name,Value=TerraformStateLock Key=Owner,Value=DevOps-Assignment Key=Terraform,Value=true
          
          # Wait for table to be created
          aws dynamodb wait table-exists --table-name "${LOCK_TABLE}"
        else
          echo "DynamoDB table ${LOCK_TABLE} already exists"
        fi

    - name: 🔍 Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check -recursive
      continue-on-error: true
    
    - name: 📋 Terragrunt Plan
      working-directory: terragrunt/environments/dev
      run: |
        terragrunt plan -no-color
      env:
        TF_VAR_bucket_name: "devops-assignment-products-dev"
        TF_VAR_distribution_name: "devops-assignment-dev"
        TF_VAR_environment: "dev"
    
    - name: 🚀 Terragrunt Apply
      working-directory: terragrunt/environments/dev
      run: |
        terragrunt apply -auto-approve -no-color
      env:
        TF_VAR_bucket_name: "devops-assignment-products-dev"
        TF_VAR_distribution_name: "devops-assignment-dev"
        TF_VAR_environment: "dev"
    
    - name: 📤 Get Terraform Outputs
      id: terraform-output
      working-directory: terragrunt/environments/dev
      run: |
        S3_BUCKET=$(terragrunt output -raw s3_bucket_id)
        CLOUDFRONT_URL=$(terragrunt output -raw cloudfront_url)
        echo "s3_bucket_id=${S3_BUCKET}" >> $GITHUB_OUTPUT
        echo "cloudfront_url=${CLOUDFRONT_URL}" >> $GITHUB_OUTPUT
        echo "Infrastructure outputs:"
        echo "S3 Bucket: ${S3_BUCKET}"
        echo "CloudFront URL: ${CLOUDFRONT_URL}"

  cleanup:
    name: 🧹 Cleanup Resources
    runs-on: ubuntu-latest
    needs: [infrastructure]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.cleanup == 'true'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔧 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: 🛠️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false
    
    - name: 📦 Install Terragrunt
      run: |
        wget https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
    
    - name: 🗑️ Terragrunt Destroy
      working-directory: terragrunt/environments/dev
      run: |
        terragrunt destroy -auto-approve -no-color
      env:
        TF_VAR_bucket_name: "devops-assignment-products-dev"
        TF_VAR_distribution_name: "devops-assignment-dev"
        TF_VAR_environment: "dev"